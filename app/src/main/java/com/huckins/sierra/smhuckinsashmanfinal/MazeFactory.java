package com.huckins.sierra.smhuckinsashmanfinal;

/**
 *MazeFactory.java
 *Author: Sierra Huckins
 *Last Updated: 20151130
 *Description: Factory to create new mazes as needed using final mazes stored here.
 **/
public class MazeFactory {
    private final int[] maze1 = {0,0,1,0,0,0,0,0,0,0,1,0,0,0,
            0,1,1,1,1,1,1,1,1,1,1,1,1,0,
            0,1,0,1,0,0,0,0,1,0,0,0,1,0,
            1,1,0,1,0,3,1,1,1,1,1,0,1,1,
            0,0,0,1,0,1,0,0,0,0,1,0,1,0,
            0,1,1,1,0,1,0,1,1,1,1,1,1,0,
            0,1,0,1,1,1,0,2,0,0,1,0,1,0,
            0,1,0,1,0,0,0,1,0,0,1,0,1,0,
            1,1,0,1,0,1,1,1,0,0,1,0,1,1,
            0,1,1,1,0,1,0,0,0,0,1,0,1,0,
            0,1,1,0,0,1,1,1,1,1,1,0,1,0,
            0,1,1,0,0,0,0,3,0,0,0,0,1,0,
            0,1,1,1,1,1,1,1,1,1,1,1,1,0,
            0,0,1,0,0,0,0,0,0,0,1,0,0,0};
    private final int[] maze2 = {0,0,0,0,0,1,0,0,1,0,0,0,0,0,
            1,1,1,1,1,1,1,1,1,1,1,1,1,1,
            0,1,0,0,1,0,0,0,0,0,1,3,1,0,
            0,1,0,0,1,1,1,1,1,0,0,0,1,0,
            0,1,0,0,1,1,1,1,1,1,0,0,1,0,
            1,1,0,0,0,0,0,0,0,1,1,0,1,1,
            0,1,0,1,1,1,1,1,0,0,1,1,1,0,
            0,1,1,1,0,0,0,1,1,0,1,0,1,0,
            0,1,0,0,0,1,1,1,1,0,1,0,1,0,
            0,1,1,1,1,1,0,1,1,0,1,0,1,0,
            0,1,0,0,3,1,0,1,0,0,1,1,1,0,
            1,1,1,0,1,0,0,1,0,0,0,0,1,1,
            0,1,1,1,1,1,1,1,1,1,1,1,1,0,
            0,0,0,0,0,1,0,0,1,0,0,0,0,0};
    private final int[] cheat = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,
            0,1,2,2,2,2,2,2,2,2,2,2,2,0,
            0,2,2,2,2,2,2,2,2,2,2,2,2,0,
            0,2,2,2,2,2,2,2,2,2,2,2,2,0,
            0,2,2,2,2,2,2,2,2,2,2,2,2,0,
            0,2,2,2,2,2,2,2,2,2,2,2,2,0,
            0,2,2,2,2,2,2,2,2,2,2,2,2,0,
            0,2,2,2,2,2,2,2,2,2,2,2,2,0,
            0,2,2,2,2,2,2,2,2,2,2,2,2,0,
            0,2,2,2,2,2,2,2,2,2,2,2,2,0,
            0,2,2,2,2,2,2,2,2,2,2,2,2,0,
            0,2,2,2,2,2,2,2,2,2,2,2,2,0,
            0,2,2,2,2,2,2,2,2,2,2,2,2,0,
            0,0,0,0,0,0,0,0,0,0,0,0,0,0};

    public MazeFactory () {}

    public int[] getMaze (int level) {
        int[] toReturn = new int[(MazeView.MAZESIZE * MazeView.MAZESIZE)];

        if (level == 1) {
            initMaze(toReturn, maze1);
        }
        else if (level == 2){
            initMaze(toReturn, maze2);
        }
        else{
            initMaze(toReturn, cheat);
        }

        return toReturn;
    }

    //copies stored maze to new maze for use in custom view
    private void initMaze(int[] toReturn, int[] original) {
        for (int i = 0; i < (original.length); i++) {
            toReturn[i] = original[i];
        }
    }

}
